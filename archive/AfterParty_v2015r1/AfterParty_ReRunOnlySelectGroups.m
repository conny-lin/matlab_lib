function AFR = AfterParty_ReRunOnlySelectGroups(AFR)
%% AfterParty_ReRunOnlySelectGroups run only selected groups
%       options: from a ExperimentReport_plateNbyGroup.txt file generated by 'AfterParty_ExpReport' manually
%       added a "select" column using 1 as include 0 as exclude, and
%       renamed as ExperimentReport_plateNbyGroup_select.txt and moved to
%       home analysis results folder.
% 
%       tested only on DrunkPosture


%% get MWTSetting
pR = AFR.PATHS.pDanceResult;
addpath(pR);
load([pR,'/matlab.mat'],'MWTSet');

%% change output path
MWTSet.PATHS.pSaveA = AFR.PATHS.pSaveA;

%% get group select file
filename = 'ExperimentReport_plateNbyGroup_select.txt';
filepath = [pR,'/',filename];
[groupname,select] = importfile(filepath);
gnameT = groupname(logical(select));

%% delete groups
D = MWTSet.Data.ByGroup;
anamelist = fieldnames(D);
A = struct;
for x = 1:numel(anamelist)
    aname = anamelist{x};
    gnameO = D.(aname).gname;
    ikeep = ismember(gnameO,gnameT);
    A.(aname).gname = gnameO(ikeep);
    
    aanamelist = fieldnames(D.(aname));
    aanamelist(ismember(aanamelist,{'gname'})) = [];
    for y = 1:numel(aanamelist)
        aaname = aanamelist{y};
        A.(aname).(aaname) = D.(aname).(aaname)(:,ikeep);
    end
    
end
MWTSet.Data.ByGroup = A;

%% get script from analysis folder
funname = char(regexprep(dircontent(pR,'*.m'),'[.m]',''));
display(sprintf('Re-run function %s',funname))
cd(pR);
str = ['[MWTSet] = ',funname,'(MWTSet);'];
eval(str);


% get only pMWT
AFR.MWTSet = MWTSet;

cd(pR); save('matlabAFR.mat','AFR');

end




%% SUBFUN
function [groupname,select] = importfile(filename, startRow, endRow)
    %IMPORTFILE Import numeric data from a text file as column vectors.
    %   [GROUPNAME,B1,B2,B3,B4,PLATECOUNT,SELECT] = IMPORTFILE(FILENAME) Reads
    %   data from text file FILENAME for the default selection.
    %
    %   [GROUPNAME,B1,B2,B3,B4,PLATECOUNT,SELECT] = IMPORTFILE(FILENAME,
    %   STARTROW, ENDROW) Reads data from rows STARTROW through ENDROW of text
    %   file FILENAME.
    %
    % Example:
    %   [groupname,b1,b2,b3,b4,platecount,select] =
    %   importfile('ExperimentReport_plateNbyGroup_select.txt',2, 19);
    %
    %    See also TEXTSCAN.

    % Auto-generated by MATLAB on 2015/05/14 13:33:48

    %% Initialize variables.
    delimiter = '\t';
    if nargin<=2
        startRow = 2;
        endRow = inf;
    end

    %% Read columns of data as strings:
    % For more information, see the TEXTSCAN documentation.
    formatSpec = '%s%s%s%s%s%s%s%[^\n\r]';

    %% Open the text file.
    fileID = fopen(filename,'r');

    %% Read columns of data according to format string.
    % This call is based on the structure of the file used to generate this
    % code. If an error occurs for a different file, try regenerating the code
    % from the Import Tool.
    dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
    for block=2:length(startRow)
        frewind(fileID);
        dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
        for col=1:length(dataArray)
            dataArray{col} = [dataArray{col};dataArrayBlock{col}];
        end
    end

    %% Close the text file.
    fclose(fileID);

    %% Convert the contents of columns containing numeric strings to numbers.
    % Replace non-numeric strings with NaN.
    raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
    for col=1:length(dataArray)-1
        raw(1:length(dataArray{col}),col) = dataArray{col};
    end
    numericData = NaN(size(dataArray{1},1),size(dataArray,2));

    for col=[3,4,6,7]
        % Converts strings in the input cell array to numbers. Replaced non-numeric
        % strings with NaN.
        rawData = dataArray{col};
        for row=1:size(rawData, 1);
            % Create a regular expression to detect and remove non-numeric prefixes and
            % suffixes.
            regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
            try
                result = regexp(rawData{row}, regexstr, 'names');
                numbers = result.numbers;

                % Detected commas in non-thousand locations.
                invalidThousandsSeparator = false;
                if any(numbers==',');
                    thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                    if isempty(regexp(thousandsRegExp, ',', 'once'));
                        numbers = NaN;
                        invalidThousandsSeparator = true;
                    end
                end
                % Convert numeric strings to numbers.
                if ~invalidThousandsSeparator;
                    numbers = textscan(strrep(numbers, ',', ''), '%f');
                    numericData(row, col) = numbers{1};
                    raw{row, col} = numbers{1};
                end
            catch me
            end
        end
    end

    %% Split data into numeric and cell columns.
    rawNumericColumns = raw(:, [3,4,6,7]);
    rawCellColumns = raw(:, [1,2,5]);


    %% Allocate imported array to column variable names
    groupname = rawCellColumns(:, 1);
    b1 = rawCellColumns(:, 2);
    b2 = cell2mat(rawNumericColumns(:, 1));
    b3 = cell2mat(rawNumericColumns(:, 2));
    b4 = rawCellColumns(:, 3);
    platecount = cell2mat(rawNumericColumns(:, 3));
    select = cell2mat(rawNumericColumns(:, 4));
end


















% %% find  MWT plates in results report
% MWTfnReport = M.Data.ByPlates.MWTfn';
% nReport = numel(M.Data.ByPlates.MWTfn);
% 
% 
% %% check if any missing plates
% D = M.MWTInfo;
% names = fieldnames(D);
% names(~regexpcellout(names,'\<pMWT')) = [];
% D1 = struct;
% nFiles = zeros(size(names));
% for x =1:numel(names)
%     nFiles(x) = size(D.(names{x}),1);
% end
% 
% 
% %% create bad MWT file report
% i = nFiles > nReport;
% if sum(i) == 0
%     disp('no plates excluded in this analysis');
% 
% else
%     nMWTRefnotSameAsnReport = names(i);
%     disp('The following MWTInfo field has more MWT files than reporting MWT number:')
%     disp(char(nMWTRefnotSameAsnReport));
%     
%     % find plates excluded and their info
%    A = MWTfnReport;
%    pMWTmissing = {};
%     for x = 1:numel(nMWTRefnotSameAsnReport)
%         p = D.(nMWTRefnotSameAsnReport{x});
%         B = mwtpath_parse(p,{'MWTname'});
%         [C,~,ib] = setxor(A,B);
%         fnMWTmissing = C;
%         iMWTmissing = ib;
%         pMWTmissing = [pMWTmissing;p(ib)];
%     end
%     
%     % find unique paths
%     m = mwtpath_parse(pMWTmissing,{'MWTname'});
%     [~,i] = unique(m);
%     pMWTmissing = pMWTmissing(i);
%     
%     % create report
%     createxpreport(pMWTmissing,AFR.PATHS.pSaveA,'ExperimentReport_badMWTfiles.txt');
%     
%     
% 
% end
% 
% 
% %% create data analysis report
% i = nFiles == max(nFiles);
% a = names(i);
% p = D.(a{1});
% mn = mwtpath_parse(p,{'MWTname'});
% p(~ismember(mn,MWTfnReport)) = [];
% createxpreport(p,AFR.PATHS.pSaveA,'ExperimentReport_gooddata.txt');
% 
% %% create by group counts
% 
% createexpreport_groupcount(p,AFR.PATHS.pSaveA,'ExperimentReport_plateNbyGroup.txt');
% 
% end
% 
% %% SUBFUN
% %% create experiment report
% function R = createxpreport(pMWT,pSave,fname)
%      R = cell(1,5);
%     [expname,Gn,mn,s,gc] = mwtpath_parse(pMWT,...
%         {'expname','gname','MWTname','strain','groupcond'});
%     R = [R;[expname,mn,Gn,s,gc]];
%     R(1,:) = [];
%     varnames = {'Experiment_Names','MWT_name','Group','strain','condition'};
%     T = cell2table(R,'VariableNames',varnames);
%     cd(pSave);
%     writetable(T,fname,'Delimiter','\t');
% end
% 
% 
% %% create by group counts
% function createexpreport_groupcount(pMWT,pSave,fname)
%     [gn,s] = mwtpath_parse(pMWT,{'gname','strain'});
%     a = tabulate(gn);
%     snamelable = a(:,1);
%     % put N2 first
%     i = regexpcellout(s,'(N2)');
%     N2U = unique(gn(i));
%     i = ismember(snamelable,N2U);
%     a = a([find(i);find(~i)],1:2);
%     gname = a(:,1);
%     gcount = a(:,2);
%     
%     b = regexpcellout(gname,'(_)','split');
%     condition = cell2table(b);
%     t = condition;
%     
%     T = table;
%     T.groupname = gname;
%     T = [T,t];
%     
%     t = table;
%     t.platecount = gcount;
%     T = [T,t];
%     cd(pSave);
%     writetable(T,fname,'Delimiter','\t');
%     
% end
% 
% 
% function a = getgroupcondition(GroupName)
%     b = regexpcellout(GroupName,'(_)','split');
%     b = b(:,2:end);
% 
%     for x = 1:size(b,1)
%         d = b(x,:);
%         e = '';
%         for y = 1:numel(d)
%            e = strcat(e,d{y});
%         end
%         a{x,1} = e;
%     end
%     
% end
% 
% function a = getstrainname(GroupName)
%     b = regexpcellout(GroupName,'(_)','split');
%     a = b(:,1);
%     
% end
% 
% 
