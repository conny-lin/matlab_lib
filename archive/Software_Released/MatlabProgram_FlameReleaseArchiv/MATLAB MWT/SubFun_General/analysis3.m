function analysis3(pexp,pfun)
%% analysis3 (primary function)
% Script Used to analyze ungrouped data generated by java code (Beethoven_v3):
    % java -jar '/home/crankin/Desktop/Beethoven_v2.jar'
    %'/home/crankin/Desktop/Chore_1.3.0.r1035.jar' -p 0.027 
    % -s 0.1 -t 20 -M 2 --shadowless -S -o 
    % 1nee#e*ss#s*SS#S*ll#l*LL#L*ww#w*aa#a*mm#m*MM#M*kk#k*bb#b*pp#p*dd#d 
    % --plugin Reoutline::exp  --plugin Respine 
    % --plugin MeasureReversal::tap::dt=1::collect=0.5::postfix=trv
% INSTRUCTION
%   drag exp folder, set it as p1 = cd
%   drag in analysis folder, set it as p2 = cd
%   type in analysis3(p1,p2) to run the function

clearvars -except pexp pfun;
pExp = pexp; 
pFun = pfun; 
addpath(genpath(pFun));
cd(pFun);
%% [FUTURE DEVELOPMENT] automatically select .mat for import
% currently need to go to change file path via path.mat file manually
load('path_conny.mat');
analysis_v3(pExp,pSave,pFun); % analysis [Analysis_v20130711(pExp,pSave)]

end                         

%% CURRENT SUBFUNCTIONS
function analysis_v3(pExp,pSave,pFun)

%% prepare save folder
[pSaveExp] = makesavefolder(pExp,pSave);

%% get MWT folders
[MWTfall] = dirlist(pExp); 

%% get import .mat
MWTfname = MWTfall(:,1);
[Expfdat,MWTftrv,MWTfdat,pmat] = Import_v20130711(MWTfname, pExp,pSaveExp); 

%% Get groups codes for MWT folders
MWTRCname = MWTfdat(:,1:2);
[Group,Gname,Gind,MWTGind, ~] = getMWTRC(MWTRCname);

%% organize import via groups: Expfdat
% process raw import to get plate mean via MWTGind
D = Expfdat;
A = {};
for f = 1:(size(D,1)); % loop for all imports
    c1 = 3; % get rid of time and mean
    c2 = size(D{f,2},2)-1; % get rid of SD
    A{f,1} = D{f,2}(:,c1:c2); % get only plate mean
    A{f,2} = MWTGind; % copy group index into each file import
    for g = 1:size(A{f,2},1);% for each group
        p = A{f,2}{g,2}; % get plate number
        for px = 1:p; % for each plate
           i = A{f,2}{g,3}(1,px); % get column number
           A{f,2}{g,4}(:,px) = A{f,1}(:,i); % get data 
        end
        
    end
    A{f,2}(:,2)= []; % remove count
    A{f,2}(:,2)= []; % remove column index
end
Expfdat(:,3) = A(:,2); % put it back in Expfdat

%% Curve
% mean and SE
D = Expfdat;
fdi = 3; % index to cell contains file data 
gdi = 2; % index to cell contains group data 
gmi = 3; % index to storing mean in group data
gsei = 4; % index to storing SE in group data
fgmi = 4;
fgsei = 5;
for f = 1:size(D,1); % for every import
    for g = 1:size(D{f,fdi},1); % for every group  
        A = {};
        A = D{f,fdi}{g,gdi}; % get data
        D{f,fdi}{g,gmi}= mean(A,2);
        D{f,fdi}{g,gsei}= SE(A);
    end
    D{f,fgmi} = cell2mat(D{f,fdi}(:,gmi)'); % combine get group mean 
    D{f,fgsei} = cell2mat(D{f,fdi}(:,gsei)'); % combine get group se 
end
Stats.curve = D;

%% Standardized Curve
D = Expfdat;
fdi = 3; % index to cell contains file data 
gdi = 2; % index to cell contains group data 
gmi = 3; % index to storing mean in group data
gsei = 4; % index to storing SE in group data
fgmi = 4;
fgsei = 5;
for f = 1:size(D,1); % for every import
    for g = 1:size(D{f,fdi},1); % for every group  
        A = {};
        A = D{f,fdi}{g,gdi}; % get data
        I = repmat(A(1,:),size(A,1),1); % get initial array
        A = A./I; % standardize to initial
        D{f,fdi}{g,gmi}= mean(A,2); % calculate mean
        D{f,fdi}{g,gsei}= SE(A); % calculate SE
    end
    D{f,fgmi} = cell2mat(D{f,fdi}(:,gmi)'); % combine get group mean 
    D{f,fgsei} = cell2mat(D{f,fdi}(:,gsei)'); % combine get group se 
end
Stats.curvestd = D;

%% assign group name 
q1 = input('Manually assign (1) or select variable (0)? ');
switch q1;
    case 1 % manually assign
        GA = Gname;
        disp(Gname);
        disp('type in the name of each group as prompted...');
        q1 = 'name of group %s: ';
        i = {};
        for x = 1:size(GA,1);
             GA(x,2) = {input(sprintf(q1,GA{x,1}),'s')};
        end
    case 0 % select assign (by continueing)
        [glist,uniqueglist,groups] = assigngroupname(Gname,gcc,snc)
    otherwise
        error('please enter 0 or 1');
end

%% sort group name for graphing
[GAA] = groupseq(GA);

%% Graphing: individual
% universal settings
Xn = 'Stim';
setfilename = 'GraphSetting.mat';
mi = 4; % c of mean
sei = 5; % c of se
GL = GAA(:,3);

% graph Dist
D = Stats.curve;
fname = 'Tap_Dist.dat';
Yn = 'Dist';
[G] = figvprep(D,mi,sei,pFun,pExp,setfilename,GL,fname,Yn,Xn,GAA);
makefig(G);
savefig(Yn,pSaveExp);

% graph Freq
D = Stats.curve;
fname = 'Tap_Freq.dat';
Yn = 'Freq';
[G] = figvprep(D,mi,sei,pFun,pExp,setfilename,GL,fname,Yn,Xn,GAA);
makefig(G);
savefig(Yn,pSaveExp);

% graph DisStd
D = Stats.curvestd;
fname = 'Tap_Dist.dat';
Yn = 'DistStd';
[G] = figvprep(D,mi,sei,pFun,pExp,setfilename,GL,fname,Yn,Xn,GAA);
makefig(G);
savefig(Yn,pSaveExp);

% graph FreqStd
D = Stats.curvestd;
fname = 'Tap_Freq.dat';
Yn = 'FreqStd';
[G] = figvprep(D,mi,sei,pFun,pExp,setfilename,GL,fname,Yn,Xn,GAA);
makefig(G);
savefig(Yn,pSaveExp);


%% [UNDER DEVELOPMENT]
%% combine 4 graphs
%% organize import via groups: MWTftrv
%% organize import via groups: MWTfdat


end

function [GAA] = groupseq(GA)
%% assign sequence of groups for graphing
GAs = GA;
GAA = {};
i = num2cell((1:size(GA,1))');
GAs = cat(2,i,GA);
GAA = GAs;
disp(GAs);
q2 = input('is this the sequence to be appeared on graphs (y=1 n=0): ');
while q2 ==0;
    disp(GAs)
    s = str2num(input('Enter the index sequence to appear on graphs separated by space...\n','s'));
    for x = 1:size(GAs,1);
        GAA(x,:) = GAs(s(x),:);
    end
    disp('')
    disp(GAA)
    q2 = input('is this correct(y=1 n=0): ');
end

end

function [a] = SE(A)
a = std(A,1,2)/sqrt(size(A,2));
end

function [Expfdat,MWTftrv,MWTfdat,pmat] = Import_v20130711(MWTfname, pExp,pSaveExp)           %% primary function

%% import summary .dat
ext = '*.dat';
r = 5;
c = 1;
[Expfdat] = importsumdata(pExp,ext,r,c);  


%% import .trv file
ext = '*.trv';
r = 5;
c = 0;
d = ' ';
[MWTftrv] = importmwtdata(ext,MWTfname,r,c,d,pExp);


%% import .dat file 
ext = '*.dat';
r = 5;
c = 0;
d = ' ';
[MWTfdat] = importmwtdata(ext,MWTfname,r,c,d,pExp);


%% save imports
clearvars c d ext r; 
cd(pSaveExp);
save('import.mat');
pmat = strcat(pSaveExp,'/','import.mat');
end

function [Expfdat] = importsumdata(pExp,ext,r,c)
%% Import data from pExp
%% [NEED USING IT] import .dat file 
% i.e. ext = '*.dat';
% import file
cd(pExp); % go to path
a = dir(ext); % list content
a = {a.name}'; % get just the name of the file
d = {};
for x = 1:size(a,1);
    d(x,1) = a(x,1); % name of file imported
    d{x,2} = dlmread(a{1},' ', r,c); % import 
end
Expfdat = d;
end

function [MWTfdata] = importmwtdata(ext,MWTfname,r,c,d,pExp)
%ext = '*.trv';
%r = 5;
%c = 1;
%[Expfdat] = importsumdata(pExp,ext,r,c);

% import file
A = MWTfname;
for x = 1:size(A,1); % for each MWTf
    p = strcat(pExp,'/',A{x,1}); % get path
    cd(p); % go to path
    a = dir(ext); % list content
    a = {a.name}'; % get just the name of the file
    if isempty(a) == 0; % is there is a file with ext
        A(x,2) = a; % name of file imported
        A{x,3} = dlmread(a{1},d, r,c); % import .trv file
    else
        ... %fail(end+1,1:2)= Expf(x,1:2); % mark this folder as bad file
    end
end
MWTfdata = A;
end

function [pSaveExp] = makesavefolder(pExp,pSave)
%% prepare save location
[pRC, Expfn] = fileparts(pExp); % get Expf name
[~, RC] = fileparts(pRC);% get run condition name
pSaveRC = strcat(pSave,'/',RC); % create new pRunCon
pSaveExp = strcat(pSaveRC,'/',Expfn); % create save path
cd(pSaveRC);
mkdir(Expfn); % create exp folder in save location
end

function [MWTfall] = dirlist(pExp)
cd(pExp); % go to directory
a = {}; % create cell array for output
a = dir; % MWTfall content
a = {a.name}'; % extract folder names only
a(ismember(a,{'.','..','.DS_Store'})) = [];  
MWTfall = {};
for x = 1:size(a,1); % for all folders 
    a(x,2) = {strcat(pExp,'/',a{x,1})}; % make path for folders
    % get only paths that goes to a folder to MWTfall cell array
    if isdir(a{x,2}) ==1; 
        MWTfall(end+1,1:2) = a(x,1:2); % record in cell array b
    else
    end
end
end

function [Group,Gname,Gind,MWTGind,RClist] = getMWTRC(MWTRCname)
% MWTRCname - first c = MWT folder name, 2nd c = RCname
% create output legend
% grouph = {'MWT file name'; 'group code'; 'plate code'; 'strain';...
    %'tracker'};
A = {};
for x = 1:size(MWTRCname,1);
    n = MWTRCname{x,2}; % name of the MWT file
    dot = strfind(n,'.'); % find position of dot
    under = strfind(n,'_'); % find underline
    A{x,1} = MWTRCname{x,1}; % MWT folder name
    A{x,2} = n(1:dot-1); % RC name 
    A{x,3} = n(1:under(1)-1); % strain
    A{x,4} = n(dot-2:dot-2); % group code
    A{x,5} = n(dot-2:dot-1);% plate code  
    A{x,6} = n(under(4)+1); % tracker
end
RClist = A;
% prepare Group output
Group = cat(2,A(:,1),A(:,4),A(:,3));
Gname = unique(Group(:,2));  
Gind = cat(2,num2cell((1:size(Group,1))'),Group(:,2)); % assign index to group to columns

T = tabulate(Group(:,2)); % find incidences of each group @ T(:,2)
A = sortrows(Gind,2); % sort group index
i = 1;
for x = 1:size(T,1); % for each group
    j = T{x,2};
    k = i+j-1;
    T{x,3} = cell2mat(A(i:k,1)'); % compute the c index for each group
    i = i+j;
end
MWTGind = T;

end

function [glist,uniqueglist,groups] = assigngroupname(sc,gcc,snc)
%% creating Exp condition variable
cd(pFun)
load('variables.mat');


%% identify groups to be assigned names
glist = {}; 
for x = 1:size(sc,1);
    glist{x,1} = strcat(sc{x,snc},'_',sc{x,gcc}); % create group name (strain_condition)
end
groupcode = unique(sc(:,gcc)); % get unique groups
strain = unique(sc(:,snc)); % get unique strains
groups = unique(glist(:,1)); % get unique strain_groups


%% Prepare variables
% see if strain is the only variable
vn = [];
disp(groups);
if size(groupcode,1) - size(strain,1) ==0;
    display('strain is the only variable detected...');
else
    display('strain is not the only variable... proceed to assignment');
    % ask how many variables applies
    disp(variable);
    vn = input('\nHow many variables shown above applies?\nExample: if you have Dose and Food as variables, enter "2"\nIf you do not see your variable on your list, enter 0:\n');
end
% get level 1 variable indexes
if vn ==0;
    error('Please talk to Conny to set up your variable before proceeding');
end
    
if isempty(vn) ==0; % if vn is not empty
    disp(variable);
    vi = []; % declare variable index
    for x = 1:vn; 
        vi(x,1) = input(sprintf('Enter the index of variable #%d: ', x)); % choose variables
    end
end


%% assign group codes
for x = 1:size(vi,1);% cycle through variable level 1
    display('IV index:');
    disp(Cond{vi(x,1),5}{1}) % display remaining groups
    display(' ');
    q1 = 'Enter IV index for group "%s": ';
    q2 = 'Please Re-enter correct IV index for group "%s". If your group is not shown above, enter 0: ';
    for x1 = 1:size(groups,1); % cycle through all groups for variable level 2
        i = [];
        i = input(sprintf(q1,groups{x1,1}));
        while isempty(i) ==1;
            i = input(sprintf(q2,groups{x1,1})); 
        end
        
        while i > size(Cond{vi(x),3},1);
            i = input(sprintf(q2,groups{x1,1})); 
        end
        
        while i ==0; % if no group name pre assigned
            groups(x1,x+1) = {'unkonwn'}; 
        end
        
        if isequal(i,Cond{vi(x),4}) ==0; % if the selected group is not a ctrl group
            groups(x1,x+1) = {Cond{vi(x),3}{i,2}}; % code group name
        end
    end
end



%% construct new name
e = size(groups,2)+1; % find last cell
% construct new name
for x = 1:size(groups,1); % cycle through rows in strain_group
    i = strfind(groups{x,1},'_'); % find index to _a
    sname = groups{x,1}(1:i-1); % get strain name
    for y = 2:e-1; % cycle through columns in groups
        if isempty(groups{x,2}) ==0; % if there is a group assigned?
            sname = strcat(sname,'_',groups{x,2}); % construct name
        else 
            sname = sname;
        end
    end
    groups{x,e} = sname;
end

%% construct index
original = {};
for x = 1:size(sc,1);
    original{x,1} = strcat(sc{x,snc},'_',sc{x,gcc});
end

%% match up group names with original list
for x = 1:size(original,1);
    for y = 1:size(groups,1);
        if strmatch(groups{y,1},original{x,1}) ==1;
            glist(x,1) = groups(y,e); % code it in c
        end
    end
end

%% create check display
r = size(groups,1);
uniqueglist = cell(r,1);
for x = 1:r;
    uniqueglist(x,1) = {strcat(groups{x,1}(end),'=', groups{x,3})};
end
  
end

function savefig(titlename,pSave)
% save figures 
% titlename = 'CombinedGraph';
cd(pSave);
h = (gcf);
set(h,'PaperPositionMode','auto'); % set to save as appeared on screen
print (h,'-dtiff', '-r0', titlename); % save as tiff
saveas(h,titlename,'fig'); % save as matlab figure 
close;
end


function [G] = figvprep(D,mi,sei,pFun,pExp,setfilename,Gname,fname,Yn,Xn,GAA)
%% Graphing: individual
%   setfilename = 'GraphSetting.mat';
%   fname = 'Tap_Dist.dat';
%   Yn = 'Dist';
%   Xn = 'Stim';
%   D = Stats.curve;
%   mi = 4; % c of mean
%   sei = 5; % c of se

% load graph settings
cd(pFun);
G = load(setfilename);
G.legend = Gname;
% load graph data source
G.Ylabel = Yn;
G.Xlabel = Xn;
[~,f] = ismember(fname,D(:,1)); % find row for fname
t1 = isequal(f,0); % test if fname exists
switch t1
    case 1; % doesn't exist
        error(sprintf('imported data is not %s...',fname));
    case 0
        G.Y = D{f,mi};
        G.E = D{f,sei};
end

%% see if group needs to be resorted
if exist('GAA') ==0;
    ...
else
    G.gs = cell2mat((GAA(:,1))');
    YA = G.Y;
    EA = G.E;
    for x = 1:size(G.gs,2);
        YA(:,x) = G.Y(:,G.gs(1,x));
        EA(:,x) = G.E(:,G.gs(1,x));
    end
    G.Y = YA;
    G.E = EA;
end
%% fix names
[~,G.expname] = fileparts(pExp);
G.expname = strrep(G.expname,'_','-');
for x = 1:size(G.legend);
    G.legend{x,1} = strrep(G.legend{x,1},'_','-');
end

end

function makefig(G)
%% create figure 
figure1 = figure('Color',[1 1 1]); % Create figure with white background

x = 1;
axes1 = axes('Parent',figure1,...
    'XTickLabel','',...
    'FontName',G.FontName);
%
hold(axes1,'all');
errorbar1 = errorbar(G.Y,G.E,...
    'Marker','.',...
    'LineWidth',1);
for i = 1:size(G.Y,2);
    set(errorbar1(i),...
        'DisplayName', G.legend{i,1},...
        'Color',G.Color(i,:)); 
end
ylim(axes1,[G.Ymin(x) G.Ymax(x)]);
xlim(axes1,[G.Xmin(x) G.Xmax(x)]);
ylabel(G.Ylabel,'FontName',G.FontName);
xlabel(G.Xlabel,'FontName',G.FontName);


legend(axes1,'show');
set(legend,...
    'Location','NorthEast',...
    'EdgeColor',[1 1 1],...
    'YColor',[1 1 1],...
    'XColor',[1 1 1],...
    'TickDir','in',...
    'LineWidth',1);


%% annotation: N
N = size(G.Y,2);
s = 'N=%d';
text = sprintf(s,N);
annotation(figure1,...
    'textbox',G.Gp(6,1:4),...
    'String',{text},...
    'FontSize',10,...
    'FontName',G.FontName,...
    'FitBoxToText','on',...
    'EdgeColor','none');

%% annotation: experiment name
annotation(figure1,...
    'textbox',G.Gp(7,1:4),...
    'String',{G.expname},...
    'FontSize',10,...
    'FontName',G.FontName,...
    'FitBoxToText','on',...
    'EdgeColor','none');
end

%% [UNDER DEVELOPMENT] SUBFUNCTIONS

function validatedata(MWTftrv)
%% validate imported files
tap = 30;
a = MWTftrv;
MWTfbad = {}; 
MWTf = {};
for x = 1:size(a,1); % for all files
    if isequal(size(a{x,5},1),tap) ==1; % if tap number is correct
        MWTf(end+1,:) = a(x,:); % record this file as passed
    else
        MWTfbad(end+1,:) = a(x,:); % move this file to bad file
    end
end
end

function cleanup(pExp)
%% Move all files to analyzed location
deletezip(pExp); % delete zip files
cd(pRC);
zip(strcat(Expfn,'.zip'),Expfn); % zip the exp folder at bet analysis folder
rmdir(pExp,'s'); % delete unzipped file
end



